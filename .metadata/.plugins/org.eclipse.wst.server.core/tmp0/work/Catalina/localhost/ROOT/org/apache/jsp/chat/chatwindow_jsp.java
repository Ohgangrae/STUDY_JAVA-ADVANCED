/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-04-28 02:54:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatwindow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("var webSocket = new WebSocket(\r\n");
      out.write("		\"");
      out.print( application.getInitParameter("CHAT_ADDR") );
      out.write("/ChatingServer\");\r\n");
      out.write("// web.xml 에 선언해둔 웹 소켓 접속 URL 뒤에 요청명을 덧붙여서 웹소켓 객체를 생성한다. \r\n");
      out.write("var chatWindow, chatMessage, chatId;\r\n");
      out.write("// 대화창 메세지 대화명 선언\r\n");
      out.write("\r\n");
      out.write("//채팅창이 열릴때 자동으로 실행되는 함수\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	chatWindow = document.getElementById(\"chatWindow\");\r\n");
      out.write("	chatMessage = document.getElementById(\"chatMessage\");	\r\n");
      out.write("	chatId = document.getElementById('chatId').value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 메시지 전송\r\n");
      out.write("\r\n");
      out.write("function sendMessage() {\r\n");
      out.write("	chatWindow.innerHTML += \"<div class='myMsg'>\" + chatMessage.value + \"</div>\"\r\n");
      out.write("	webSocket.send(chatId + '|' + chatMessage.value);   //서버로 전송\r\n");
      out.write("	chatMessage.value=\"\"; //보냈으니까 메시지 입력창 내용 지우기\r\n");
      out.write("	chatWindow.scrollTop = chatWindow.scrollHeight;  // 대화창 스크롤\r\n");
      out.write("//클라이언트의 메세지를 전송하는 매서드. 메세지를 먼저 대화창에 표시하고\r\n");
      out.write("// 서버로 전송해준다. 작성자|메세지 형태로 조립하여 서버로 전송해준다.\r\n");
      out.write("//전송 후 입력상자는 비우고 화면을 아래로 내려준다. \r\n");
      out.write("}	\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("// 서버와 연결 종료\r\n");
      out.write("function disconnect() {\r\n");
      out.write("	webSocket.close();	\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("// 엔터키 입력 처리\r\n");
      out.write("function enterKey() {\r\n");
      out.write("	if(window.event.keyCode == 13) {  //13 은 enter 코드값\r\n");
      out.write("		sendMessage();\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("//매세지 작성 후 엔터 키를 누르면 sendMessage()매서드를 호출한다. 마우스로 전송버튼을 누르지 않아도 \r\n");
      out.write("//엔터키로 메세지를 전송해주는 기능이다. \r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("webSocket.onopen = function(event) {\r\n");
      out.write("	chatWindow.innerHTML += \"웹소켓 서버에  연결되었습니다.<br/>\";\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("webSocket.onclose = function(event) {\r\n");
      out.write("	chatWindow.innerHTML += \"웹소켓 서버가 종료되었습니다.<br/>\";\r\n");
      out.write("\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("webSocket.onerror = function(event) {\r\n");
      out.write("	alert(event.data);\r\n");
      out.write("	chatWindow.innerHTML += \"채팅 중 에러가 발생하였습니다.<br/>\";\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//메시지를 받았을 때 실행\r\n");
      out.write("\r\n");
      out.write("webSocket.onmessage = function(event) {\r\n");
      out.write("	var message = event.data.split(\"|\"); //대화명과 메세지 분리\r\n");
      out.write("	var sender = message[0];\r\n");
      out.write("	var content = message[1];\r\n");
      out.write("	if (content != \"\") {\r\n");
      out.write("		if (content.match(\"/\")) {  //귓속말 대화 인지 여부\r\n");
      out.write("			if(content.match((\"/\" + chatId))) {\r\n");
      out.write("				var temp = content.replace((\"/\" + chatId), \"[귓속말] : \");\r\n");
      out.write("				chatWindow.innerHTML += \"<div>\" + sender + \"\" + temp + \"</div>\";\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		else {  //일반 대화\r\n");
      out.write("			chatWindow.innerHTML += \"<div>\" + sender + \" : \" + content + \"</div>\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	chatWindow.scrollTop = chatWindow.scrollHeight;\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("대화명:<input type=\"text\" id=\"chatId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ param.chatId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly />\r\n");
      out.write("<button id =\"closeBtn\" onclick=\"disconnect();\"> 채팅 종료</button>\r\n");
      out.write("<div id = \"chatWindow\"></div>\r\n");
      out.write("<div>\r\n");
      out.write("<input type=\"text\" id=\"chatMessage\" onkeyup=\"enterKey();\">\r\n");
      out.write("<button id=\"sendBtn\" onclick=\"sendMessage();\">전송</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
